# isr_wrapper_asm.S is an automatically generated file. Do not edit directly.
#
# Interrupt Service Routines
# These are the procedures which are directly referenced by the IDT.
# Though, all are simply assembly wrappers which call the high-level dispatcher.

.macro ISR_WRAPPER INTERRUPT_NUMBER
# Setup a stack frame.
pushq %rbp
movq %rsp, %rbp

# Align the stack on the sixteen byte boundary.
andq $-16, %rsp

# Save floating point state.
subq $512, %rsp
fxsaveq (%rsp)

pushq %rax
pushq %rcx
pushq %rdx
pushq %rbx
pushq %rsp
pushq %rbp
pushq %rsi
pushq %rdi
pushq %r8
pushq %r9
pushq %r10
pushq %r11
pushq %r12
pushq %r13
pushq %r14
pushq %r15

# Get the error code the CPU provided and push it into the structure here.
movq %rbp, %rax
subq $8, %rax
pushq (%rax)

# Get the return address pushed by the CPU, push it into the structure too.
movq %rbp, %rax
subq $8, %rax
pushq (%rax)

pushq \INTERRUPT_NUMBER # Push the interrupt number.
pushq $672 # Push the size of the parameter package.

movq %rsp, %rdi # The first parameter is the address of the parameter package.
callq interrupt_dispatch_trampoline

addq $8, %rsp  # Clean up the size of the structure
addq $8, %rsp  # Clean up the interrupt number

addq $8, %rsp # Clean up the instruction pointer we pushed just above.
addq $8, %rsp # Clean up the error code we pushed just above.

popq %r15
popq %r14
popq %r13
popq %r12
popq %r11
popq %r10
popq %r9
popq %r8
popq %rdi
popq %rsi
popq %rbp
popq %rsp
popq %rbx
popq %rdx
popq %rcx
popq %rax

# Restore floating point state.
fxrstorq (%rsp)

# Tear down the stack frame.
movq %rbp, %rsp
popq %rbp
.endm

# The CPU pushes an error code on the stack for the following ISR wrappers.
<% [8, 10..14].map { |r| Array(r) }.inject( :+ ).each do |isr| %>
.global isr_wrapper_<%= isr %>
isr_wrapper_<%= isr %>:
    ISR_WRAPPER $<%= isr %>
    iretq
<% end %>

# The CPU does not push an error code for the following ISR wrappers.
<% [0..7, 9, 16..19, 32..255].map { |r| Array(r) }.inject( :+ ).each do |isr| %>
.global isr_wrapper_<%= isr %>
isr_wrapper_<%= isr %>:
    pushq $0 # Push a zero for the error code value.
    ISR_WRAPPER $<%= isr %>
    addq $8, %rsp  # Clean up the fake error code value.
    iretq
<% end %>
