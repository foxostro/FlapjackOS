// ll_<%= suffix %>.h is an automatically generated file. Do not edit directly.
#pragma once

#ifdef __cplusplus
extern "C" {
#endif

<% ll_node_t="ll_node_#{suffix}_t" %>
<% ll_t="ll_#{suffix}_t" %>

#include <stddef.h>

// A node in a linked list which contains items with type "<%= type %>".
typedef struct ll_node_<%= suffix %> {
    struct ll_node_<%= suffix %> *prev, *next;
    <%= type %> value;
} <%= ll_node_t %>;

// Allocate a new node with the specified value.
<%= ll_node_t %> * ll_node_alloc(<%= type %> value);

// Add the specified node to the end of the specified list.
void ll_node_add_<%= suffix %>(<%= ll_node_t %> *head, <%= ll_node_t %> *node);

// Gets the index'th node after `head'.
// Returns the head if index is zero.
<%= ll_node_t %> * ll_node_at_<%= suffix %>(<%= ll_node_t %> *head, size_t index);

// Remove the specified node from the list.
// Returns the value of the removed item.
<%= type %> ll_node_remove_<%= suffix %>(<%= ll_node_t %> *node);


// Represents the entire linked list, which is slightly more convenient than
// passing around the head node everywhere.
typedef struct ll_<%= suffix %> {
    <%= ll_node_t %> *head;
    size_t count;
} ll_<%= suffix %>_t;

// Create a new, empty linked list.
<%= ll_t %> * ll_init_<%= suffix %>(void);

// Destroy an existing linked list.
void ll_destroy_<%= suffix %>(<%= ll_t %> *list);

// Inserts an item at the tail of the linked list.
void ll_push_back_<%= suffix %>(<%= ll_t %> *list, <%= type %> value);

// Inserts an item at the head of the linked list.
void ll_push_front_<%= suffix %>(<%= ll_t %> *list, <%= type %> value);

// Gets the index'th value of the list.
// Returns the value of the head if index is zero.
<%= type %> ll_at_<%= suffix %>(<%= ll_t %> *list, size_t index);

// Removes the index'th item in the list.
// Returns the value of the removed item.
<%= type %> ll_remove_<%= suffix %>(<%= ll_t %> *list, size_t index);

// Returns the number of items in the list.
size_t ll_count_<%= suffix %>(<%= ll_t %> *list);


#ifdef __cplusplus
}
#endif